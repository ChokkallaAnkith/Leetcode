class Solution:
    def longestPalindrome(self, words: List[str]) -> int:
        d=Counter(words) # TAKE COUNT OF WORDS
        l=0
        f=0
        dic={} # SEPERATE DIC FOR STORING ELEMENTS LIKE {AA,CC,LL,XX,AA.......}
        for i in words:
# IF REVERSE OF ELEMENT IS EXIST LEN+1
            if d[i[::-1]]>0 and len(set(i))==2 and d[i]>0:
                l+=2
# MAKE COUNTS OF BOTH REVERSE AND NORMAL -1 TO REDUCE REPETATIONS
                d[i]-=1
                d[i[::-1]]-=1
# STORING ELEMENTS LIKE{aa,cc,ll,jj,mm,nn,....}
            elif len(set(i))==1:
                if i not in dic.keys():
                    dic[i]=1
                else:
                    dic[i]+=1
        # now from equal character elements count length as follows
        for j in dic.values():
            # single frequency number should take once
            if j==1 and f==0:
                l+=1
                f=1
# else take only even frequencies to make palindrome
            elif j>1:
                l+=2*(j//2)
# if no such single frequency number take any which are odd because one element is remains after taking in above loop
        if f==0:
            for j in dic.values():
                if j%2!=0:
                    l+=1
                    break
# return double the length ::there are two chars in one element
        return 2*l
