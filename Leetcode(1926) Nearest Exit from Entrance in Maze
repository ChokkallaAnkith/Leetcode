class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        rows, cols = len(maze), len(maze[0])

        # register entrance
        queue, steps = deque([tuple(entrance), (-1,-1)]), 0
        maze[entrance[0]][entrance[1]] = '+'
        # 4 possible directions (up, down, left, right)
        directions = [(-1,0), (1,0), (0,-1), (0,1)]
        while queue:
            r, c = queue.popleft()
            if r == -1:
                steps += 1
                if queue:
                    queue.append((-1,-1))

            else:
                '''
                if (r,c) marked as visited here, 
                the memory footprint would be terrible 
                for maps with large connected empty space
                '''
                for dr, dc in directions:
                    nr, nc = r+dr, c+dc
                    if 0<=nr<rows and 0<=nc<cols and maze[nr][nc]=='.':
                        queue.append((nr,nc))
                        maze[nr][nc] = '+' # this is more efficieny
                        if nr==0 or nr==rows-1 or nc==0 or nc==cols-1:
                            return steps+1
                        
        return -1
